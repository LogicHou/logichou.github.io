<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Proj-86</title>
    <link>/post/</link>
    <description>Recent content in Posts on Proj-86</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 22 Sep 2022 20:28:17 +0800</lastBuildDate><atom:link href="/post/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTML5 笔记</title>
      <link>/post/2022/09/html5-note/</link>
      <pubDate>Thu, 22 Sep 2022 20:28:17 +0800</pubDate>
      
      <guid>/post/2022/09/html5-note/</guid>
      <description>HTML5 的几个特性 空白折叠现象 文字和文字之间的多个空格、换行会被折叠成一个空格 标签“内壁”和文字之间的空格会被忽略 1 2 3 4 5 6 &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;</description>
    </item>
    
    <item>
      <title>Go语言基础 - channel速览</title>
      <link>/post/2022/09/go-channel/</link>
      <pubDate>Wed, 21 Sep 2022 18:23:10 +0800</pubDate>
      
      <guid>/post/2022/09/go-channel/</guid>
      <description>channel 的概念 可以实现 goroutine 减的通信，也可以实现 goroutine 间的同步。 channel 类型在 Go 中为“一等公民”，可以像使用普通变量那样使用 channel，比如：定义 channel 类型变量</description>
    </item>
    
    <item>
      <title>Go常见的并发模式 - 超时与取消模式</title>
      <link>/post/2022/09/go-concurrency-pattern-4/</link>
      <pubDate>Tue, 20 Sep 2022 20:32:11 +0800</pubDate>
      
      <guid>/post/2022/09/go-concurrency-pattern-4/</guid>
      <description>示例1 尝试从天气中心获取数据 编写一个从气象数据中心获取天气信息的客户端。该客户端每次会并发向三个气象数据服务中心发起数据查询请求，并以最快返</description>
    </item>
    
    <item>
      <title>Go常见的并发模式 - 管道模式</title>
      <link>/post/2022/09/go-concurrency-pattern-3/</link>
      <pubDate>Mon, 19 Sep 2022 16:11:47 +0800</pubDate>
      
      <guid>/post/2022/09/go-concurrency-pattern-3/</guid>
      <description>管道模式 在 Go 中管道模式被实现成了一条由 channel 连接的一条“数据流水线”。在该流水线中，每个数据处理环节都由一组功能相同的 goroutine 完成。在每个数据处理环节</description>
    </item>
    
    <item>
      <title>Go常见的并发模式 - 退出模式</title>
      <link>/post/2022/09/go-concurrency-pattern-2/</link>
      <pubDate>Sun, 18 Sep 2022 17:51:27 +0800</pubDate>
      
      <guid>/post/2022/09/go-concurrency-pattern-2/</guid>
      <description>分离模式 分离模式是使用最为广泛的 goroutine 退出模式。对于分离的 goroutine，创建它的 goroutine 不需要关心它的退出，这类 goroutine 在启动后即与其创建者彻底分离，</description>
    </item>
    
    <item>
      <title>Go常见的并发模式 - 创建模式</title>
      <link>/post/2022/09/go-concurrency-pattern-1/</link>
      <pubDate>Sat, 17 Sep 2022 22:51:19 +0800</pubDate>
      
      <guid>/post/2022/09/go-concurrency-pattern-1/</guid>
      <description>&lt;p&gt;在内部创建一个 goroutine 并返回一个 channel 类型的变量的函数，是 Go 中最常见的 goroutine 创建模式。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
